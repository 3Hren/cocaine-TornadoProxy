#!/usr/bin/env python

import random
import logging
import time
import re
import os
import sys
import httplib
from functools import partial
from collections import defaultdict

import tornado.httpserver
import tornado.options
from tornado import ioloop

import msgpack

from cocaine.services import Service
from cocaine.exceptions import ServiceError
from cocaine.exceptions import CocaineError

from cocaineproxy import Daemon

logger = logging.getLogger()


SERVICE_CACHE_COUNT = 5
REFRESH_PERIOD = 100
DEFAULT_TIMEOUT = 1
DEFAULT_USER = "cocaine"
URL_REGEX = re.compile(r"/([^/]*)/([^/?]*)(.*)")

tornado.options.define("port", default=8088, type=int, help="listening port number")
tornado.options.define("count", default=SERVICE_CACHE_COUNT, type=int, help="count of instances per service")
tornado.options.define("daemon", default=False, type=bool, help="daemonize")
tornado.options.define("pidfile", default="/var/run/tornado", type=str, help="pidfile")
tornado.options.define("user", default=DEFAULT_USER, type=str, help="Set process's username")
actions = tornado.options.parse_command_line()

cache = defaultdict(list)
dying = defaultdict(list)

io_loop = ioloop.IOLoop.instance()



def get_timeout(app_name):
    """dummy"""
    return DEFAULT_TIMEOUT


def reconnector(app, name):
    try:
        logger.info("Try reconnect %s %s" % (app.servicename, "%s:%s" % app.service_endpoint))
        app.reconnect()
    except Exception as err:
        logger.error("Unable to reconnect %s, because %s" % (name, str(err)))
    dying[name].remove(app)
    cache[name].append(app)
    next_refr = (1 + random.random()) * REFRESH_PERIOD
    io_loop.add_timeout(time.time() + next_refr, move_to_dying(app, name))
    if app.connected:
        logger.info("Reconnect %s %s succesfully. Next refresh after %f"\
                         % (app.servicename, "%s:%s" % app.service_endpoint, next_refr))
    else:
        logger.warning("Unable to reconnect %s" % name)


def move_to_dying(app, name):
    def wrapper():
        active_apps = len(cache[name])
        if active_apps < tornado.options.options.count/2:
            return
        logger.info("Move to dying %s %s from pool with active %d" % (app.servicename, "%s:%s" % app.service_endpoint, active_apps))
        # Move service to sandbox for waiting current sessions
        try:
            inx = cache[name].index(app)
            # To avoid gc collect
            dying[name].append(cache[name].pop(inx))
        except ValueError as err:
            logger.error("Broken cache")
            return

        io_loop.add_timeout(time.time() + get_timeout(name), partial(reconnector, app, name))
    return wrapper


def get_service(name):
    if len(cache[name]) < SERVICE_CACHE_COUNT - len(dying[name]):
        try:
            created = [Service(name)
                                for _ in xrange(0, 10 - len(cache[name]))]
            [logger.info("Connect to app: %s endpoint %s " % (app.servicename, "%s:%s" % app.service_endpoint))
                                    for app in created]
            cache[name].extend(created)
            for app in created:
                io_loop.add_timeout(time.time() + (1 + random.random()) * REFRESH_PERIOD, move_to_dying(app, name))
        except Exception as err:
            logger.error(str(err))
            return None
    chosen = random.choice(cache[name])
    if chosen.connected:
        return chosen
    else:
        logger.warning("Service %s disconnected %s" % (chosen.servicename,
                                                        chosen.service_endpoint))
        try:
            chosen.reconnect()
            if chosen.connected:
                logger.info("Service %s reconnect succesfully" % chosen.servicename)
                return chosen
            else:
                return None
        except Exception as err:
            return None


ANSWER = "%(VERSION)s %(CODE)d %(STATUS)s\r\n%(HEADERS)s\r\n%(BODY)s" 
def gen(obj):
    try:
        headers = yield
        chunk = headers.get()
        body = yield
        message = body.get()
    except ServiceError as err:
        message = "Eventhandler is unavailable for this event"
        obj.write(ANSWER % { "VERSION" : obj.version,
                         "CODE" : 501,
                         "STATUS" : httplib.responses[501],
                         "HEADERS" : 'Content-Length: %d\r\n' % len(message),
                         "BODY" : message })
    except Exception as err:
        logger.error(str(err))
    else:
        headers_from_app = '\r\n'.join(': '.join(_) for _ in chunk['headers'])
        if headers_from_app:
            headers = headers_from_app + '\r\nContent-Length: %d\r\n' % len(message)
        else:
            headers = 'Content-Length: %d\r\n' % len(message)
        obj.write(ANSWER % {"VERSION" : obj.version,
                     "CODE" : chunk["code"],
                     "STATUS" : httplib.responses[chunk["code"]],
                     "HEADERS"  : headers,
                     "BODY" : message })
    obj.finish()


def pack_httprequest(request):
    d = dict()
    d['meta'] = { "cookies" : dict((item.key, item.value) for item in request.cookies.itervalues()),
                  "headers" : dict(request.headers),
                  "host" : request.host,
                  "method" : request.method,
                  "path_info" : request.path,
                  "query_string" : request.query,
                  "remote_addr" : request.remote_ip,
                  "url" : request.uri,
                  "files" : request.files
                }
    d['body'] = request.body
    d['request'] = dict((param, value[0]) for param, value in request.arguments.iteritems())
    return d


def handle_request(request):
    match = URL_REGEX.match(request.uri)
    if match is None:
        message = "Invalid url"
        request.write("%s 404 Not found\r\nContent-Length: %d\r\n\r\n%s" % (
                 request.version, len(message), message))
        request.finish()
        return

    name, event, other = match.groups()
    if name == '' or event == '':
        message = "Invalid request"
        request.write("%s 404 Not found\r\nContent-Length: %d\r\n\r\n%s" % (
                request.version, len(message), message))
        request.finish()
        return

    # Drop from query appname and event's name
    if not other.startswith('/'):
        other = "/%s" % other
    request.uri = other 
    request.path = other.partition("?")[0]

    s = get_service(name)
    if s is None:
        message = "Current application %s is unavailable" % name
        request.write("%s 404 Not found\r\nContent-Length: %d\r\n\r\n%s" % (
                request.version, len(message), message))
        request.finish()
        return
        
    data = pack_httprequest(request)
    fut = s.invoke(event, msgpack.packb(data))
    g = gen(request)
    g.next()
    fut.then(g.send).run()


def main():
    http_server = tornado.httpserver.HTTPServer(handle_request, no_keep_alive=False)
    http_server.listen(tornado.options.options.port)
    tornado.ioloop.IOLoop.instance().start()


if __name__ == "__main__":
    if tornado.options.options.daemon:
        d = Daemon(tornado.options.options.pidfile,
                    tornado.options.options.user)
        if "start" in actions:
            d.run = main
            d.start()
        elif "stop" in actions:
            d.stop()
        elif "restart" in actions:
            d.run = main
            d.restart()
        elif "status" in actions:
            d.status()
        else:
            print("start|stop|restart|status")
            sys.exit(0)
    else:
        main()
